/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GDBUS_INTERFACE_H__
#define __GDBUS_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.example.MyInterface */

#define TYPE_MY_INTERFACE (my_interface_get_type ())
#define MY_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_INTERFACE, MyInterface))
#define IS_MY_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_INTERFACE))
#define MY_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MY_INTERFACE, MyInterfaceIface))

struct _MyInterface;
typedef struct _MyInterface MyInterface;
typedef struct _MyInterfaceIface MyInterfaceIface;

struct _MyInterfaceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_my_method) (
    MyInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_in_arg1,
    gint arg_in_arg2);

  const gchar *const * (*get_array_str_property) (MyInterface *object);

  GVariant * (*get_array_uint32_property) (MyInterface *object);

  gboolean  (*get_bool_property) (MyInterface *object);

  guchar  (*get_byte_property) (MyInterface *object);

  gdouble  (*get_double_property) (MyInterface *object);

  gint16  (*get_int16_property) (MyInterface *object);

  gint  (*get_int32_property) (MyInterface *object);

  gint64  (*get_int64_property) (MyInterface *object);

  const gchar * (*get_str_property) (MyInterface *object);

  guint16  (*get_uint16_property) (MyInterface *object);

  guint  (*get_uint32_property) (MyInterface *object);

  guint64  (*get_uint64_property) (MyInterface *object);

  void (*bar_signal) (
    MyInterface *object,
    const gchar *arg_blah,
    const gchar *arg_boo);

};

GType my_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *my_interface_interface_info (void);
guint my_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void my_interface_complete_my_method (
    MyInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *out_arg1,
    gint out_arg2);



/* D-Bus signal emissions functions: */
void my_interface_emit_bar_signal (
    MyInterface *object,
    const gchar *arg_blah,
    const gchar *arg_boo);



/* D-Bus method calls: */
void my_interface_call_my_method (
    MyInterface *proxy,
    const gchar *arg_in_arg1,
    gint arg_in_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean my_interface_call_my_method_finish (
    MyInterface *proxy,
    gchar **out_out_arg1,
    gint *out_out_arg2,
    GAsyncResult *res,
    GError **error);

gboolean my_interface_call_my_method_sync (
    MyInterface *proxy,
    const gchar *arg_in_arg1,
    gint arg_in_arg2,
    gchar **out_out_arg1,
    gint *out_out_arg2,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *my_interface_get_str_property (MyInterface *object);
gchar *my_interface_dup_str_property (MyInterface *object);
void my_interface_set_str_property (MyInterface *object, const gchar *value);

guchar my_interface_get_byte_property (MyInterface *object);
void my_interface_set_byte_property (MyInterface *object, guchar value);

gboolean my_interface_get_bool_property (MyInterface *object);
void my_interface_set_bool_property (MyInterface *object, gboolean value);

gint16 my_interface_get_int16_property (MyInterface *object);
void my_interface_set_int16_property (MyInterface *object, gint16 value);

guint16 my_interface_get_uint16_property (MyInterface *object);
void my_interface_set_uint16_property (MyInterface *object, guint16 value);

gint my_interface_get_int32_property (MyInterface *object);
void my_interface_set_int32_property (MyInterface *object, gint value);

guint my_interface_get_uint32_property (MyInterface *object);
void my_interface_set_uint32_property (MyInterface *object, guint value);

gint64 my_interface_get_int64_property (MyInterface *object);
void my_interface_set_int64_property (MyInterface *object, gint64 value);

guint64 my_interface_get_uint64_property (MyInterface *object);
void my_interface_set_uint64_property (MyInterface *object, guint64 value);

gdouble my_interface_get_double_property (MyInterface *object);
void my_interface_set_double_property (MyInterface *object, gdouble value);

const gchar *const *my_interface_get_array_str_property (MyInterface *object);
gchar **my_interface_dup_array_str_property (MyInterface *object);
void my_interface_set_array_str_property (MyInterface *object, const gchar *const *value);

GVariant *my_interface_get_array_uint32_property (MyInterface *object);
GVariant *my_interface_dup_array_uint32_property (MyInterface *object);
void my_interface_set_array_uint32_property (MyInterface *object, GVariant *value);


/* ---- */

#define TYPE_MY_INTERFACE_PROXY (my_interface_proxy_get_type ())
#define MY_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_INTERFACE_PROXY, MyInterfaceProxy))
#define MY_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MY_INTERFACE_PROXY, MyInterfaceProxyClass))
#define MY_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MY_INTERFACE_PROXY, MyInterfaceProxyClass))
#define IS_MY_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_INTERFACE_PROXY))
#define IS_MY_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MY_INTERFACE_PROXY))

typedef struct _MyInterfaceProxy MyInterfaceProxy;
typedef struct _MyInterfaceProxyClass MyInterfaceProxyClass;
typedef struct _MyInterfaceProxyPrivate MyInterfaceProxyPrivate;

struct _MyInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MyInterfaceProxyPrivate *priv;
};

struct _MyInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType my_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyInterfaceProxy, g_object_unref)
#endif

void my_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MyInterface *my_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MyInterface *my_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void my_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MyInterface *my_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MyInterface *my_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MY_INTERFACE_SKELETON (my_interface_skeleton_get_type ())
#define MY_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_INTERFACE_SKELETON, MyInterfaceSkeleton))
#define MY_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MY_INTERFACE_SKELETON, MyInterfaceSkeletonClass))
#define MY_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MY_INTERFACE_SKELETON, MyInterfaceSkeletonClass))
#define IS_MY_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_INTERFACE_SKELETON))
#define IS_MY_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MY_INTERFACE_SKELETON))

typedef struct _MyInterfaceSkeleton MyInterfaceSkeleton;
typedef struct _MyInterfaceSkeletonClass MyInterfaceSkeletonClass;
typedef struct _MyInterfaceSkeletonPrivate MyInterfaceSkeletonPrivate;

struct _MyInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MyInterfaceSkeletonPrivate *priv;
};

struct _MyInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType my_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyInterfaceSkeleton, g_object_unref)
#endif

MyInterface *my_interface_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

MyInterface *object_get_my_interface (Object *object);
MyInterface *object_peek_my_interface (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_my_interface (ObjectSkeleton *object, MyInterface *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __GDBUS_INTERFACE_H__ */
